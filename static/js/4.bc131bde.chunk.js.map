{"version":3,"sources":["components/Dialogs/DialogItem/DialogItem.tsx","../node_modules/@material-ui/icons/esm/DoneOutlineRounded.js","components/Dialogs/Messages/MessageItem.tsx","components/Dialogs/Messages/Messages.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["useStyles","makeStyles","theme","createStyles","root","avatar","width","spacing","height","marginRight","boxSizing","button","textTransform","StyledBadge","withStyles","badge","right","top","border","palette","background","paper","padding","Badge","DialogItem","name","onClick","newMessagesCount","selected","classes","ListItem","className","Button","Avatar","alt","src","undefined","style","badgeContent","color","max","createSvgIcon","React","createElement","d","display","marginBottom","day","justifyContent","fontSize","opacity","textWrapper","position","alignItems","paddingBottom","borderRadius","text","marginLeft","meta","bottom","time","MessageItem","addedAt","recipientId","ownerId","viewed","newDay","dialogAvatar","useSelector","dialogAvatarSelector","ownerAvatar","avatarOwnerSmall","recipient","timeZone","Date","getTimezoneOffset","hours","getHours","minutes","toLocaleString","minute","month","year","dense","paddingRight","paddingLeft","order","format","twoDigit","DoneOutlineRounded","Messages","messages","loading","userIdSelector","List","flexGrow","map","index","arr","id","body","key","formatText","unshielding","dialogsWrapper","dialogs","flexDirection","margin","overflow","input","Dialogs","selectedDialog","loadingMessages","sendHandler","getMessages","setNextPage","pageSize","pageSizeSelector","listRef","useRef","element","current","scrollHandler","useCallback","scrollTop","useEffect","addEventListener","scrollBy","offsetHeight","removeEventListener","Grid","container","item","sm","userName","profile","small","photos","fullName","ref","length","CircularProgress","size","TextFieldWithButton","buttonName","DialogsContainer","dispatch","useDispatch","isAuth","isAuthSelector","loadingDialogs","loadingDialogsSelector","selectedDialogSelector","dialogsSelector","messagesSelector","loadingMessagesSelector","isCancel","getDialogs","unmount","to","value","sendMessage","ResultCode","Success","Error"],"mappings":"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","file":"static/js/4.bc131bde.chunk.js","sourcesContent":["import React from 'react'\n\nimport { ListItem, Avatar, Button, Badge } from '@material-ui/core'\nimport { makeStyles, createStyles, Theme, withStyles } from '@material-ui/core/styles'\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            // cursor: 'pointer'\n        },\n        avatar: {\n            width: theme.spacing(8),\n            height: theme.spacing(8),\n            marginRight: theme.spacing(1),\n            boxSizing: 'border-box'\n        },\n        button: {\n            textTransform: 'none'\n        }\n    }),\n)\n\nconst StyledBadge = withStyles((theme: Theme) =>\n    createStyles({\n        badge: {\n            right: -4,\n            top: 4,\n            border: `2px solid ${theme.palette.background.paper}`,\n            padding: '0 4px',\n        },\n    }),\n)(Badge)\n\n\ntype TProps = {\n    name: string\n    avatar: string | null\n    newMessagesCount: number\n    selected: boolean\n    onClick: () => void\n}\n\nconst DialogItem: React.FC<TProps> = ({name, onClick, avatar, newMessagesCount, selected}) => {\n    const classes = useStyles()\n    return (\n        <ListItem onClick={onClick} className={classes.root}>\n            <Button className={classes.button}>\n                <Avatar\n                    className={classes.avatar}\n                    alt='Avatar'\n                    src={avatar ? avatar : undefined}\n                    style={{border: selected ? '2px solid #0808f9' : 'none'}}\n                />\n                {\n                    newMessagesCount ?\n                        <StyledBadge badgeContent={newMessagesCount} color=\"secondary\" max={100} >\n                            <strong style={{color: selected ? '#0808f9' : '#000'}}>{name}</strong>\n                        </StyledBadge> :\n                        name \n                }\n            </Button>\n        </ListItem>\n    )\n};\n\nexport default DialogItem;\n","import React from 'react';\nimport createSvgIcon from './utils/createSvgIcon';\nexport default createSvgIcon(React.createElement(\"path\", {\n  d: \"M20.47 5.63c.39.39.39 1.01 0 1.4L9.13 18.37c-.39.39-1.01.39-1.4 0l-4.2-4.2a.9839.9839 0 010-1.4c.39-.39 1.01-.39 1.4 0l3.5 3.5L19.07 5.63c.39-.39 1.01-.39 1.4 0zm-2.11-2.12l-9.93 9.93-2.79-2.79c-.78-.78-2.05-.78-2.83 0l-1.4 1.4c-.78.78-.78 2.05 0 2.83l5.6 5.6c.78.78 2.05.78 2.83 0L22.59 7.74c.78-.78.78-2.05 0-2.83l-1.4-1.4c-.79-.78-2.05-.78-2.83 0z\"\n}), 'DoneOutlineRounded');","import React from 'react'\nimport { useSelector } from 'react-redux'\n\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles'\nimport { Avatar, ListItem } from '@material-ui/core'\nimport { DoneOutlineRounded } from '@material-ui/icons'\n\nimport format from '../../../utils/formatText'\nimport { dialogAvatar as dialogAvatarSelector } from '../../../redux/selectors/dialogsSelectors'\nimport { avatarOwnerSmall } from '../../../redux/selectors/profileSelectors'\n\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            display: 'flex',\n            marginBottom: theme.spacing(1)\n        },\n        day: {\n            justifyContent: 'center',\n            fontSize: '0.8rem',\n            opacity: 0.7\n        },\n        textWrapper: {\n            position: 'relative',\n            display: 'flex',\n            alignItems: 'center',\n            padding: theme.spacing(1),\n            paddingBottom: 12,\n            border: '1px solid #ccc',\n            borderRadius: 5,\n        },\n        avatar: {\n            width: theme.spacing(3),\n            height: theme.spacing(3),\n        },\n        text: {\n            marginLeft: '0.5rem',\n            marginRight: '0.5rem'\n        },\n        meta: {\n            position: 'relative',\n            display: 'flex',\n            alignItems: 'center',\n            bottom: -12\n        },\n        time: {\n            fontSize: '0.6rem',\n            marginRight: 5,\n        }\n    }),\n)\n\ntype TProps = {\n    ownerId: number\n    recipientId: number\n    text: string\n    addedAt: string\n    viewed: boolean\n    newDay: boolean\n}\n\nconst MessageItem: React.FC<TProps> = ({ text, addedAt, recipientId, ownerId, viewed, newDay}) => {\n    const classes = useStyles()\n    const dialogAvatar = useSelector(dialogAvatarSelector)\n    const ownerAvatar = useSelector(avatarOwnerSmall)\n    const recipient = recipientId === ownerId\n    const timeZone = (new Date().getTimezoneOffset()) * -1\n    const hours = +((new Date(addedAt)).getHours()) + timeZone / 60\n    const minutes = (new Date(addedAt)).toLocaleString('en-GB', {minute: '2-digit'})\n    return (\n        <>\n            {\n                newDay &&\n                    <ListItem className={classes.day}>\n                        {(new Date(addedAt)).toLocaleString('en-GB', { day: '2-digit', month: 'long', year: 'numeric'})}\n                    </ListItem>\n            }\n            <ListItem\n                dense\n                className={classes.root}\n                style={{\n                    justifyContent: !recipient ? 'flex-end' : 'flex-start',\n                    paddingRight: !recipient ? 0 : 12,\n                    paddingLeft: recipient ? 0 : 12,\n                }}\n            >\n                <div className={classes.textWrapper} >\n                    <Avatar src={ !recipient ?\n                                    (ownerAvatar ? ownerAvatar : undefined ) :\n                                    (dialogAvatar ? dialogAvatar : undefined) }\n                        className={classes.avatar}\n                        style={{order: !recipient ? 2 : 0}} \n                    />\n                    <span className={classes.text}\n                        style={{order: !recipient ? 1 : 0}} \n                    >{text}</span>\n                    <span className={classes.meta}>\n                        <span className={classes.time}>\n                            { `${hours}:${format.twoDigit(minutes)}`}\n                        </span>\n                        {!recipient && <DoneOutlineRounded style={{fontSize: '0.8rem', color: viewed ? 'green' : 'red'}}/>}\n                    </span>\n                </div>\n            </ListItem>\n        </>\n    )\n}\n\nexport default MessageItem\n","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport formatText from '../../../utils/formatText'\n\nimport { TMessages } from '../../../types/dialogs'\nimport { List } from '@material-ui/core'\n\nimport { userIdSelector } from '../../../redux/selectors/authSelectors'\nimport MessageItem from './MessageItem'\n\ntype TProps = {\n    messages?: TMessages\n    loading: boolean\n}\nconst Messages: React.FC<TProps> = ({ messages = [], loading }) => {\n    const ownerId = useSelector(userIdSelector)\n    return (\n        <List style={{flexGrow: 1}}>\n            {\n                messages.map(({ id, body, recipientId, addedAt, viewed }, index, arr) => {\n                    let newDay = true                 \n                    if (index > 0) {\n                        newDay = (new Date(arr[index - 1].addedAt)).toLocaleString('en-GB', {day: '2-digit'}) <\n                                    (new Date(arr[index].addedAt)).toLocaleString('en-GB', {day: '2-digit'})\n                    }\n                    return (\n                        <MessageItem\n                            key={id}\n                            ownerId={ownerId as number}\n                            recipientId={recipientId}\n                            text={formatText.unshielding(body)}\n                            addedAt={addedAt}\n                            viewed={viewed}\n                            newDay={newDay}\n                    />)\n                })\n            }\n        </List>\n    )\n}\n\nexport default Messages","import React, { useRef, useCallback, useEffect } from 'react'\nimport { useSelector } from 'react-redux'\n\nimport { List, Grid, CircularProgress } from '@material-ui/core';\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles'\n\nimport { ResultCode } from '../../types/resultCodes'\nimport { TDialogs, TMessages } from '../../types/dialogs'\n\nimport { pageSize as pageSizeSelector } from '../../redux/selectors/dialogsSelectors'\nimport DialogItem from './DialogItem/DialogItem'\nimport Messages from './Messages/Messages'\nimport TextFieldWithButton from '../UI/TextFieldWithButton'\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        dialogsWrapper: {\n            marginBottom: theme.spacing(2)\n        },\n        dialogs: {\n            flexDirection: 'column',\n            padding: 0,\n            margin: 0,\n            '& li': {\n                margin: 0,\n                padding: 0\n            },\n        },\n        messages: {\n            height: '62vh',\n            overflow: 'auto',\n        },\n        input: {\n            justifyContent: 'flex-end'\n        }\n    }),\n)\n\ntype TProps = {\n    dialogs: TDialogs\n    loadingMessages: boolean\n    messages: TMessages\n    selectedDialog: number | null\n    getMessages: (id: number) => void\n    sendHandler: (value: string) => ResultCode\n    setNextPage: () => void\n}\n\nconst Dialogs: React.FC<TProps> = ({\n            dialogs, selectedDialog, loadingMessages, messages, \n            sendHandler, getMessages, setNextPage\n        }) => {\n    const classes = useStyles()\n    const loadingMessagesStyle = {\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center'\n    }\n    const pageSize = useSelector(pageSizeSelector)\n    const listRef = useRef<HTMLDivElement>(null)\n    const element = listRef?.current\n    const scrollHandler = useCallback(() => {\n        if (element && element.scrollTop === 0) {\n            setNextPage()\n        }\n}, [element, setNextPage])\n    useEffect(() => {\n        if (element) {\n            element.addEventListener('scroll', scrollHandler)\n            if (!loadingMessages)\n                element.scrollBy(0, typeof element.offsetHeight === 'number' ? element.offsetHeight : 0)\n        }\n        return () => {\n            element && element.removeEventListener('scroll', scrollHandler)\n        }\n    }, [scrollHandler, element, loadingMessages, messages, pageSize])\n    \n\n    return (\n        <Grid container>\n            <Grid item container className={classes.dialogsWrapper}>\n                <Grid item sm={4}>\n                    <List className={classes.dialogs}>\n                        {\n                            dialogs.map(({id, userName, profile, photos:{small}, newMessagesCount}) =>\n                                <DialogItem\n                                    key={id}\n                                    name={profile && profile.fullName ? profile.fullName : userName}\n                                    avatar={small}\n                                    onClick={() => getMessages(id) }\n                                    newMessagesCount={newMessagesCount}\n                                    selected={selectedDialog === id}\n                                />)\n                        }\n                    </List>\n                </Grid>\n                <Grid item sm={8}\n                    className={classes.messages}\n                    style={loadingMessages ? loadingMessagesStyle : undefined}\n                    ref={listRef}\n                >\n                    {\n                        loadingMessages && messages && !messages.length ? <CircularProgress size={80} /> :\n                        <Messages messages={messages} loading={loadingMessages} />\n                    }\n                </Grid>\n            </Grid>\n            {\n                selectedDialog &&\n                    <Grid item container className={classes.input}>\n                        <TextFieldWithButton onClick={sendHandler} buttonName='send' />\n                    </Grid>\n            }\n        </Grid>\n    )\n};\n\nexport default Dialogs;\n","import React, { useEffect } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { Redirect } from 'react-router-dom'\n\nimport { CircularProgress } from '@material-ui/core'\nimport { ResultCode } from '../../types/resultCodes'\nimport {\n    dialogs as dialogsSelector,\n    selectedDialog as selectedDialogSelector,\n    loadingDialogs as loadingDialogsSelector,\n    messages as messagesSelector,\n    loadingMessages as loadingMessagesSelector,\n} from '../../redux/selectors/dialogsSelectors'\nimport { isAuthSelector } from '../../redux/selectors/authSelectors'\n\nimport { getDialogs, getMessages, sendMessage, setNextPage, unmount } from '../../redux/dialogsActions'\n\nimport Dialogs from './Dialogs'\n\nconst DialogsContainer:React.FC = () => {\n    const dispatch = useDispatch()\n\n    const isAuth = useSelector(isAuthSelector)\n    const loadingDialogs = useSelector(loadingDialogsSelector)\n    const selectedDialog = useSelector(selectedDialogSelector)\n    const dialogs = useSelector(dialogsSelector)\n    const messages = useSelector(messagesSelector)\n    const loadingMessages = useSelector(loadingMessagesSelector)\n\n\n    const getMessagesHandler = (id: number) => {\n        dispatch(getMessages(id))\n    }\n\n    const sendMessageHandler = (value: string) => {\n        if (selectedDialog) {\n            dispatch(sendMessage(selectedDialog, value))\n            return ResultCode.Success\n        }\n        return ResultCode.Error\n    }\n\n    const setNextPageHandler = () => {\n        dispatch(setNextPage())\n    }\n\n    useEffect(() => {\n        let isCancel = false\n        if (!isCancel) {\n            dispatch(getDialogs())\n        }\n        return () => { isCancel = true }\n    }, [dispatch])\n    \n    useEffect( () => () => { dispatch(unmount()) }, [dispatch] )\n\n    return (\n        <>\n            { !isAuth && <Redirect to='/' />}\n            {\n                loadingDialogs ? <CircularProgress size={120} /> :\n                    <Dialogs\n                        dialogs={dialogs}\n                        messages={messages ? messages : []}\n                        loadingMessages={loadingMessages}\n                        sendHandler={sendMessageHandler}\n                        getMessages={getMessagesHandler}\n                        selectedDialog={selectedDialog}\n                        setNextPage={setNextPageHandler}\n                    />\n            }\n        </>\n    )\n}\n\nexport default DialogsContainer\n"],"sourceRoot":""}